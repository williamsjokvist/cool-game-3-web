---
import Layout from "../layouts/Layout.astro";

import { CharacterModel } from "../types/character";
import Nav from "../components/Nav.astro";
import CharacterPopup from "../components/CharacterPopup.astro";

const getRankings = async () => {
  let characters: CharacterModel[] = [];
  try {
    const res = await fetch(`${import.meta.env.SERVER_URL}/characters`);
    if (!res.ok) {
      console.log("Failed to fetch rankings");
    }

    characters = await res.json();
  } catch (err) {
    console.log("Failed to fetch rankings");
  }

  return characters;
};

const characters = await getRankings();
---

<script>
  const table = document.getElementById('rankings')

  enum TableHeads {
    Rank = 0,
    Name = 1,
    Lv = 2,
    Job = 3,
    Exp = 4,
    Fame = 5,
    Meso = 6,
    PlayTime = 7
  }

  const sortTable = (column) => {
    const rows = table.querySelectorAll(`tbody tr`);
    const sortedRows = Array.from(rows).sort((a, b) => {

      const cmpElementA = a.querySelectorAll(`td`)[column]
      const cmpElementB = b.querySelectorAll(`td`)[column]

      let cmpValueA: string | number = cmpElementA.textContent;
      let cmpValueB: string | number = cmpElementB.textContent;

      if (column == TableHeads.Lv || column == TableHeads.Exp || column == TableHeads.Fame || column == TableHeads.Meso || column == TableHeads.PlayTime) {
        cmpValueA = Number(cmpElementA.getAttribute('data-number'))
        cmpValueB = Number(cmpElementB.getAttribute('data-number'))
        if (cmpValueA > cmpValueB)
          return -1
        else if (cmpValueA < cmpValueB)
          return 1
        else
          return 0
      } else {
        // Order by name
        if (cmpValueA < cmpValueB)
          return -1
        else if (cmpValueA > cmpValueB)
          return 1
        else
          return 0
      }
    });
    
    table.querySelector(`tbody`).append(...sortedRows);
    console.log('sorted by', column)
  }

  table.querySelectorAll(`th`).forEach((th, pos) => {
    const button = th.getElementsByTagName(`button`)[0];
    button && button.addEventListener(`click`, () => sortTable(pos));
  });
</script>
<Layout title="Cool Game 3 - Rankings">
  <main class="mt-12 pb-24">
    <section class="text-white text-center text-xl">
      <h2 class="text-4xl font-bold">Total Characters: {characters.length}</h2>
      {
        characters && characters.length > 0 && (
          <table id="rankings" class="mx-auto mt-8">
            <thead>
              <tr>
                <th class="text-center font-bold px-4"><button type='button' class='text-center w-full hover:underline'>#</button></th>
                <th class="text-left font-bold px-4"><button type='button' class='hover:underline'>Name</button></th>
                <th class="text-left font-bold px-4"><button type='button' class='hover:underline'>LV</button></th>
                <th class="text-left font-bold px-4"><button type='button' class='hover:underline'>Job</button></th>
                <th class="text-left font-bold px-4"><button type='button' class='hover:underline'>EXP</button></th>
                <th class="text-left font-bold px-4"><button type='button' class='hover:underline'>Fame</button></th>
                <th class="text-left font-bold px-4"><button type='button' class='hover:underline'>Meso</button></th>
                <th class="text-right font-bold px-4"><button type='button' class='hover:underline'>Play Time</button></th>
              </tr>
            </thead>
            <tbody>
              {characters.map((character) => {
                const {
                  Rank,
                  Name,
                  Level,
                  JobName,
                  Exp,
                  ExpRequired,
                  TotalPlayTime,
                  Meso,
                  Fame,
                } = character;
                const playTimeHrs = Math.floor(
                  TotalPlayTime / 1000 / (60 * 60)
                );

                return (
                  <tr class="relative group even:bg-[rgba(255,255,255,0.05)] hover:bg-[rgba(255,255,255,0.125)]">
                    <td class="text-right px-4 py-2" data-number={Rank}>#{Rank}</td>
                    <td class="text-left px-4 py-2 text-base font-arial">
                      <span class='bg-[#5479c4] border-solid border-white border-2 shadow-[0px_0px_3px_rgba(0,0,0,.5)] px-3 py-1 rounded-md text-white'>
                        {Name}          
                      </span>
                      <CharacterPopup character={character} />
                    </td>
                    <td class="text-left px-4 py-2 font-bold text-base font-arial" aria-label={`Level ${Level}`} data-number={Level}>
                      {Level.toString()
                        .split("")
                        .map((num: string) => (
                          <span class={`level-no level-no-${num}`} />
                        ))}
                    </td>
                    <td class="text-left px-4 py-2">{JobName}</td>
                    <td class="text-left px-4 py-2" data-number={((Exp / ExpRequired) * 100).toFixed(2)}>
                      {((Exp / ExpRequired) * 100).toFixed(2)}%
                    </td>
                    <td class="text-left px-4 py-2" data-number={Fame}>{Fame}</td>
                    <td class="text-left px-4 py-2" data-number={Meso}>{Meso.toLocaleString()}</td>

                    <td class="text-right px-4 py-2" data-number={playTimeHrs}>
                      <time datetime={playTimeHrs.toString()}>
                        {playTimeHrs} hrs
                      </time>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        )
      }
    </section>
  </main>
</Layout>
