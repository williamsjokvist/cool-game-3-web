---
import Layout from "../layouts/Layout.astro";
import CharacterPopup from "../components/CharacterPopup.astro";
import { getCharacters } from "../proto/cool-game-web";
const characters = await getCharacters({
  isOnline: false,
  limit: 0,
  offset: 0,
});
---

<script>
  const table = document.getElementById("rankings");

  enum TableHeads {
    Rank = 0,
    Name = 1,
    Lv = 2,
    Job = 3,
    Exp = 4,
    Fame = 5,
    Meso = 6,
    PlayTime = 7,
  }

  const sortTable = (column) => {
    const rows = table.querySelectorAll(`tbody tr`);
    const sortedRows = Array.from(rows).sort((a, b) => {
      const cmpElementA = a.querySelectorAll(`td`)[column];
      const cmpElementB = b.querySelectorAll(`td`)[column];

      let cmpValueA: string | number = cmpElementA.textContent;
      let cmpValueB: string | number = cmpElementB.textContent;

      if (column != TableHeads.Name && column != TableHeads.Job) {
        cmpValueA = Number(cmpElementA.getAttribute("data-number"));
        cmpValueB = Number(cmpElementB.getAttribute("data-number"));
      }

      if (
        column == TableHeads.Name ||
        column == TableHeads.Rank ||
        column == TableHeads.Job
      ) {
        if (cmpValueA < cmpValueB) return -1;
        else if (cmpValueA > cmpValueB) return 1;
        else return 0;
      } else {
        if (cmpValueA > cmpValueB) return -1;
        else if (cmpValueA < cmpValueB) return 1;
        else return 0;
      }
    });

    table.querySelector(`tbody`).append(...sortedRows);
    console.log("sorted by", column);
  };

  table.querySelectorAll(`th`).forEach((th, pos) => {
    const button = th.getElementsByTagName(`button`)[0];
    button && button.addEventListener(`click`, () => sortTable(pos));
  });
</script>
<Layout title="Cool Game 3 - Rankings">
  <main class="mt-12 pb-24">
    <section class="text-white">
      <h2
        class="bg-white text-[#235877] rounded-md m-1 font-arial py-1 px-2 text-base flex gap-4 items-center justify-between max-w-3xl mx-auto"
      >
        Total Characters:
        <span class="level-no" style="filter: hue-rotate(175deg)">
          {
            characters.length
              .toString()
              .split("")
              .map((num) => <span class={`level-no-${num}`} />)
          }
        </span>
      </h2>
      {
        characters && characters.length > 0 && (
          <table
            id="rankings"
            class="max-w-7xl w-full md:mx-auto mt-8 text-md md:text-xl"
          >
            <thead class="hidden md:table-header-group">
              <tr>
                <th class="text-center font-bold px-4">
                  <button
                    type="button"
                    class="text-center w-full hover:underline"
                  >
                    Overall Rank
                  </button>
                </th>
                <th class="text-left font-bold px-4">
                  <button type="button" class="hover:underline">
                    Name
                  </button>
                </th>
                <th class="text-left font-bold px-4">
                  <button type="button" class="hover:underline">
                    LV
                  </button>
                </th>
                <th class="text-left font-bold px-4">
                  <button type="button" class="hover:underline">
                    Job
                  </button>
                </th>
                <th class="text-left font-bold px-4">
                  <button type="button" class="hover:underline">
                    EXP
                  </button>
                </th>
                <th class="text-left font-bold px-4">
                  <button type="button" class="hover:underline">
                    Fame
                  </button>
                </th>
                <th class="text-left font-bold px-4">
                  <button type="button" class="hover:underline">
                    Meso
                  </button>
                </th>
                <th class="text-right font-bold px-4">
                  <button type="button" class="hover:underline">
                    Play Time
                  </button>
                </th>
              </tr>
            </thead>
            <tbody>
              {characters.map((character, index) => {
                const {
                  Rank,
                  Name,
                  Level,
                  JobName,
                  Exp,
                  ExpRequired,
                  TotalPlayTime,
                  Meso,
                  Fame,
                } = character;
                const playTimeHrs = Math.floor(
                  TotalPlayTime / 1000 / (60 * 60)
                );

                return (
                  <tr class="text-center md:text-left relative group text-[#031532] md:text-[rgba(255,255,255,0.75)] md:hover:text-white even:bg-[rgba(255,255,255,0.075)] hover:bg-[rgba(255,255,255,0.155)]">
                    <td
                      class="text-xl md:text-lg bg-[#10a6fe] md:bg-transparent block md:table-cell rank text-center md:px-4 py-1 md:py-2"
                      data-number={Rank}
                    >
                      #{Rank}
                    </td>
                    <td class="inline-block md:table-cell  md:px-4 py-4 md:py-2 text-xs md:text-base font-arial">
                      <span class="text-base bg-[#5479c4] border-solid border-white border-2 shadow-[0px_0px_3px_rgba(0,0,0,.5)] px-3 py-1 rounded-md text-white">
                        {Name}
                      </span>
                      <CharacterPopup character={character} />
                    </td>
                    <td
                      class="inline-block ml-5 md:ml-0 md:table-cell md:px-4 "
                      aria-label={`Level ${Level}`}
                      data-number={Level}
                    >
                      <span class="level-no justify-center md:justify-normal">
                        {Level.toString()
                          .split("")
                          .map((num) => (
                            <span class={`level-no-${num}`} />
                          ))}
                      </span>
                    </td>
                    <td class="bg-[#f4f7f8] max-w-[200px] mx-auto rounded-md md:bg-transparent block px-3 py-[2px] md:table-cell  md:px-4 md:py-2 whitespace-nowrap">
                      {JobName}
                    </td>
                    <td
                      class="bg-[#f4f7f8] max-w-[200px] mx-auto my-2 rounded-md md:bg-transparent inline-block px-3 py-[2px] md:table-cell  md:px-4 md:py-2 whitespace-nowrap"
                      data-number={((Exp / ExpRequired) * 100).toFixed(2)}
                    >
                      {((Exp / ExpRequired) * 100).toFixed(2)}%
                    </td>
                    <td
                      class="bg-[#f4f7f8] max-w-[200px] mx-auto my-2 rounded-md md:bg-transparent inline-block px-3 py-[2px] md:table-cell  md:px-4 md:py-2 whitespace-nowrap"
                      data-number={Fame}
                    >
                      {Fame}
                    </td>
                    <td
                      class="bg-[#f4f7f8] max-w-[200px] mx-auto my-2 rounded-md md:bg-transparent inline-block px-3 py-[2px] md:table-cell  md:px-4 md:py-2 whitespace-nowrap"
                      data-number={Meso}
                    >
                      {Meso.toLocaleString()}
                    </td>
                    <td
                      class="bg-[#f4f7f8] max-w-[200px] mx-auto my-2 rounded-md md:bg-transparent inline-block px-3 py-[2px] md:table-cell  md:px-4 md:py-2 whitespace-nowrap md:text-right"
                      data-number={playTimeHrs}
                    >
                      {playTimeHrs} hrs
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        )
      }
    </section>
  </main>
</Layout>

<style lang="sass">
  #rankings
    counter-reset: count

  #rankings tbody tr
    counter-increment: count 1

  #rankings .rank::before
    content: "#" counter(count, decimal)
    position: absolute
    left: -68px
    color: #5372ce
</style>
